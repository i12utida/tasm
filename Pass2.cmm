
#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <ctype.hmm>

#include "Pass2.hmm"
#include "Lexical.hmm"
#include "SymTbl.hmm"
#include "OperationTbl.hmm"
#include "Util.hmm"
#include "Error.hmm"
#include "Editor.hmm"

//#define DEBUG

// static変数
boolean eofflag = false;    // EOFならtrueにする
int pca;                    // ロケーションカウンタ
int op;                     // オペコード
int gr;                     // 汎用レジスタ
int xr;                     // アドレッシングモード
int data;                   // データ

int first_byte;             // 第一機械語
int second_byte;            // 第二機械語
int third_byte;             // 第三機械語
int forth_byte;             // 第四機械語
int[] byte = array(256);    // 機械語配列

int token_id;               // トークン番号
int style;                  // 記述スタイル
int address;                // アドレス

char[] str;                 // 文字列
char[] opr1 = array(40);    // オペランドの最初の文字列
char[] opr2 = array(40);    // オペランドの2番目にくる文字列
char[] opr3 = array(40);    // オペランドの3番目にくる文字列

boolean label;              // 文字列がラベルならtrue

int cnt;                    // カウンタ用変数

/* 拡張式 
 * expantion -> expression
 *              STRING
 */
void expantion(){
    int i;
    if(token_id == LxSTR){                              // トークン番号が文字列なら
        str = getLxStr();                               // Lexicalの文字列をstrに格納
        #ifdef DEBUG
            printf("expansion str = %s\n",str);
        #endif
	    for(i = 0; i < strLen(str); i = i+1){           // 文字列の長さまで
            if(str[i] == ' '){                          // 空白なら
                #ifdef DEBUG
                    printf("expansion\n");
                #endif
                byte[cnt] = 0x20;                       // 機械語配列に空白の文字コードをセット
            } else{                                     // それ以外なら
		        byte[cnt] = ord(str[i]);                // 文字コードに変換したものを機械語配列に格納
            }
            cnt = cnt + 1;                              // カウントアップ
        }
        setOpr("\"");                                   // リスト用にダブルクウォートをセット
        setOpr(str);                                    // リスト用に文字列をセット
        setOpr("\"");                                   // リスト用にダブルクウォートをセット
        token_id = getToken();                          // 次のトークン(カンマ、改行、コメントがくる)を取ってくる
        #ifdef DEBUG
            printf("expansion token_id = *%d*\n",token_id);
        #endif
    } else if(token_id != LxEOL && token_id != LxEOF){  // 改行もしくはEOF以外なら
        byte[cnt] = eqAnalyzer();                       // 式を解析して機械語配列に結果を取ってくる
        cnt = cnt + 1;                                  // カウントアップ
        token_id = getTokenID();                        // 現在のLexicalのトークン番号(カンマ、改行、コメントがくる)を取ってくる
    }
}




/* 値列
 * valueSeq -> expantion
 */
void valueSeq(){
    cnt = 0;                                                // カウントを初期化
    while(true){                                            // 改行かEOFが来るまで繰り返す
	    token_id = getToken();                              // トークンを取ってくる
	    expantion();                                        // 拡張式
	    if(token_id == LxCMM){                              // カンマなら
	        setOpr(",");                                    // リスト用にカンマをセット
	    } else if(token_id == LxCOM){                       // コメントなら
            str = getLxStr();                               // Lexicalの文字列を取ってくる
            setComment(str);                                // リスト用にコメントをセット
	    } else if(token_id == LxEOL || token_id == LxEOF){  // 改行もしくはEOFなら
	        break ;                                         // 値列解析終了
	    } else {                                            // それ以外なら
            error2("Value not suitable for value stream",getLxStr()); // エラー
	        break ;
	    }
    }
}


void EQU(){
    int value;                  // 値を格納する変数
    token_id = getToken();      // <式>の最初の部分を取ってくる
    value = eqAnalyzer();       // 式を解析して結果を取ってくる
    setPca(value);              // 返ってきた値をリストのpcaの部分にセット
    token_id = getTokenID();    // 現在のトークン番号を取ってくる
    if(token_id == LxCOM){      // コメントなら
        str = getLxStr();       // Lexicalのstrを取ってくる
        setComment(str);        // コメントをセット
        token_id = getToken();  // 次のトークンへ進めておく
    }
}

void DS(){
    int i;                          // 添字用
    int value;                      // 確保しなければならない領域数を記憶する変数
    
    token_id = getToken();          // <式>の最初の部分を取ってくる
    value = eqAnalyzer();           // 式を解析して結果を取ってくる
    token_id = getTokenID();        // 現在のトークン番号を取ってくる
                                      
    if(token_id == LxCOM){          // コメントなら
        str = getLxStr();           // コメントを取ってくる
        setComment(str);            // リストにコメントをセットする
        token_id = getToken();      // 次のトークンへ進めておく
    }                                 
                                      
    while(value/5 != 0){            // 値が4以上のとき
        setFirstByte(0);            // リストの第一バイトをセット
        setSecondByte(0);           // リストの第二バイトをセット
        setThirdByte(0);            // リストの第三バイトをセット
        setForthByte(0);            // リストの第四バイトをセット
        value = value-4;            // 4つ領域を割り当てたので4引く
        for (i = 0; i < 4; i = i+1){// 機械語を四つ格納するまで
            setMachineCode(0);      // バイナリ用に機械語をセット
        }                             
        setPca(pca);                // リスト用にロケーションカウンタをセット
        pca = pca + 4;              // pcaをカウントアップ
        printBuffer();              // リストのバッファを出力
        initBuffers();              // バッファを初期化
    }

    while(value != 0){              // 解析すべき値の数が0以外なら
        pca = pca + value;          // ロケーションカウンタを格納した値分
        setPca(pca);                // リスト用にロケーションカウンタをセット
        
        if(value == 4){             // 四つ残っているなら
            setForthByte(0);        // リスト用に第四機械語配列に0をセット
            setMachineCode(0);      // 機械語配列に0をセット
            value = value - 1;      // 確保する領域数をカウントダウン
        }

        if(value == 3){             // 三つ残っているなら
            setThirdByte(0);        // リスト用に第三機械語配列に0をセット
            setMachineCode(0);      // 機械語配列に0をセット
            value = value - 1;      // 確保する領域数をカウントダウン
        }

        if(value == 2){             // 二つ残っているなら
            setSecondByte(0);       // リスト用に第二機械語配列に0をセット
            setMachineCode(0);      // 機械語配列に0をセット
            value = value - 1;      // 確保する領域数をカウントダウン
        }

        if(value == 1){             // 一つ残っているなら
            setFirstByte(0);        // リスト用に第一機械語配列に0をセット
            setMachineCode(0);      // 機械語配列に0をセット
            value = value - 1;      // 確保する領域数をカウントダウン
        }

    }
}

void ORG(){
    int i;
    int value;

    setPca(1000);                       // ORGの場合Pcaは空白なので空白をセット
    token_id = getToken();              // <式>の最初の部分を取ってくる
    value = eqAnalyzer();               // 式の解析を行い結果を取ってくる
    token_id = getTokenID();            // 現在のトークン番号を取ってくる
    while(pca < value){                 // 式の値まで
        setMachineCode(0);              // 16進ファイルの機械語を0で埋める
        pca = pca + 1;                  // pcaをカウントアップ
    }                                     
    if(token_id == LxCOM){              // コメントなら
        str = getLxStr();               // Lexicalのstrを取ってくる
        setComment(str);                // コメントをセット
        token_id = getToken();          // トークンを次へ進めておく
    }
}


void opStyle1(){
    setPca(pca);                        // リスト用にロケーションカウンタをセット
    pca = pca + searchSize(token_id);   // pcaを増加
    setRsvWord(str);                    // リストの予約語をセット
    op = searchMachineCode(token_id);   // 予約語のop部分をセット
    first_byte = op;                    // 第一バイトをセット
    setMachineCode(first_byte);         // 16進ファイルの機械語をセット
    setFirstByte(first_byte);           // リストの第一バイトをセット
    token_id = getToken();              // コメントもしくは改行トークンを取ってくる 
    if(token_id == LxCOM){              // コメントなら
        str = getLxStr();               // strにLexicalのstrを取ってくる
        setComment(str);                // リストのコメントをセットする
        token_id = getToken();
    }
}

void opStyle2(){
    setPca(pca);                        // リスト用にロケーションカウンタをセット
    pca = pca + searchSize(token_id);   // pcaを増加
    setRsvWord(str);                    // リストの予約語をセット
    op = searchMachineCode(token_id);   // 予約語のop部分をセット

    // <レジスタ>の処理
    token_id = getToken();              // <レジスタ>の部分を取ってくる
    opr1 = getLxStr();                  // Lexicalからレジスタの綴りを取ってくる
    setOpr(opr1);                       // オペランドをセット
    if(token_id == LxG0){               // G0なら
        gr = 0x00;                      // オペコードをG0にセット
    } else if(token_id == LxG1){        // G1なら
        gr = 0x04;                      // オペコードをG1にセット
    } else if(token_id == LxG2){        // G2なら
        gr = 0x08;                      // オペコードをG2にセット
    } else if(token_id == LxSP){        // SPなら
        gr = 0x0C;                      // オペコードをSPにセット
    } else {                            // それ以外なら
        error2("You must write register here",getLxStr()); //エラー
    }

    first_byte = op | gr;               // 第一バイトを確定
    setMachineCode(first_byte);         // 16進ファイルの第一バイトをセット
    setFirstByte(first_byte);           // リストの第一バイトをセット
    token_id = getToken();              // コメントもしくは改行トークンを取ってくる
    if(token_id == LxCOM){              // コメントなら
        str = getLxStr();               // strにLexicalのstrを取ってくる
        setComment(str);                // リストのコメントをセットする
        token_id = getToken();
    }
}

void opStyle3(){
    setPca(pca);                        // リスト用にロケーションカウンタをセット
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */

    token_id = getToken();              /* <レジスタ>の部分を取ってくる */
    opr1 = getLxStr();                  /* Lexicalからレジスタの綴りを取ってくる */
    setOpr(opr1);                       /* オペランドをセット */
    if(token_id == LxG0){
        gr = 0x00;
    } else if(token_id == LxG1){
        gr = 0x04;
    } else if(token_id == LxG2){
        gr = 0x08;
    } else if(token_id == LxSP){
        gr = 0x0C;
    } else {
        error2("you must write register here.",getLxStr());
    }

    first_byte = op | gr;               /* 第一バイトを確定 */
    setMachineCode(first_byte);         /* 16進ファイルの第一バイトをセット */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */

    token_id = getToken();              /* カンマを取ってくる */
    if(token_id == LxCMM){              /* カンマなら */
        setOpr(",");                    /* リストのオペランドにカンマをセット */
    } else {
        /* カンマがないというエラー処理を書く */
        error2("Can't find ','",getLxStr());
    }

    token_id = getToken();              /* <式>の最初の部分を取ってくる */
    second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
    setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */
    setSecondByte(second_byte);         /* リストの第二バイトをセット */
    
    token_id = getTokenID();              /* 式の解析でトークン番号が変動したので取ってくる(コメントか改行がくるはず) */

    

    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
        token_id = getToken();
    }

}

void opStyle4(){
    
    // ロケーションカウンタの処理
    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */

    // <命令>の処理
    str = getLxStr();                   /* Lexicalのstrを取ってくる */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */



    // <レジスタ>の処理
    token_id = getToken();              /* <レジスタ>の部分を取ってくる */
    opr1 = getLxStr();                  /* Lexicalからレジスタの綴りを取ってくる */
    setOpr(opr1);                       /* オペランドをセット */
    if(token_id == LxG0){
        gr = 0x00;
    } else if(token_id == LxG1){
        gr = 0x04;
    } else if(token_id == LxG2){
        gr = 0x08;
    } else if(token_id == LxSP){
        gr = 0x0C;
    } else {                            // レジスタ以外ならエラー
        error2("You must write register here",getLxStr());
    }
    
    // カンマの処理
    token_id = getToken();              /* カンマを取ってくる */
    if(token_id == LxCMM){              /* カンマなら */
        setOpr(",");                    /* リストのオペランドにカンマをセット */
    } else {
        /* カンマがないというエラー処理を書く */
        error2("Can't find ','",getLxStr());
    }

    // <アドレス1>の処理
    token_id = getToken();              /* '#'もしくは数値を取ってくる */
    if(token_id == LxIMM){              /* イミディエイトなら */
        setOpr("#");                        /* '#'をセット */
        xr = 0x03;                          /* xr部をセット */
        token_id = getToken();              /* <式>の最初の部分を取ってくる */
        second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
        setSecondByte(second_byte);         /* リストの第二バイトをセット */
    } else if(token_id == LxNUM || token_id == LxNAM || token_id == LxLBR){      /* 数値もしくはラベルなら */
        second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
        setSecondByte(second_byte);         /* リストの第二バイトをセット */
        
    }
    token_id = getTokenID();            /* 式解析でトークン番号が変動したので現在のトークン番号を取ってくる */
        
    if(token_id == LxCMM){              /* カンマ(インデクス)なら */
        setOpr(",");                        /* リストのオペランドにカンマをセット */
        token_id = getToken();              /* <インデクス>の部分を取ってくる */
        opr3 = getLxStr();                  /* Lexicalのstrをopr3にセット */
        setOpr(opr3);                       /* リストのオペランドにセット */
         

        if(token_id == LxG1){               /* G1インデクスモードなら */
                xr = 0x01;                          /* xrをセット */
            } else if(token_id == LxG2){         /* G2インデクスモードなら */
                xr = 0x02;                          /* xrをセット */
            } else{
                /* インデクス部が異常であるエラー処理 */
                error2("You must write register here",getLxStr());
            }
        }

    first_byte = op | gr | xr;          /* first_byteを確定 */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */

    if(token_id == LxG1 || token_id == LxG2){   /* インデクスモードだったら */
        token_id = getToken();                      /* コメントもしくは改行を取ってくる */
    } else {                                    /* それ以外のモードなら */
        
        token_id = getTokenID();                    /* 式の解析で現在のトークン番号が変わったので取ってくる(コメントもしくは改行) */
    }
    
    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
        token_id = getToken();
    }

    setMachineCode(first_byte);         /* 16進ファイルの機械語をセット */
    setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */

}

void opStyle5(){

    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */

    token_id = getToken();              /* <レジスタ>の部分を取ってくる */
    opr1 = getLxStr();                  /* Lexicalからレジスタの綴りを取ってくる */
    setOpr(opr1);                       /* オペランドをセット */
    if(token_id == LxG0){
        gr = 0x00;
    } else if(token_id == LxG1){
        gr = 0x04;
    } else if(token_id == LxG2){
        gr = 0x08;
    } else if(token_id == LxSP){
        gr = 0x0C;
    } else{
        error2("You must write register here",getLxStr());
    }

    token_id = getToken();              /* カンマを取ってくる */
    if(token_id == LxCMM){              /* カンマなら */
        setOpr(",");                    /* リストのオペランドにカンマをセット */
    } else {
        /* カンマがないというエラー処理を書く */
        error2("Can't find ','",getLxStr());
    }

    token_id = getToken();              /* <式>の最初の部分を取ってくる */
    if(token_id == LxNUM || token_id == LxNAM || token_id == LxLBR){      /* 数値もしくはラベルなら */
        second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
        setSecondByte(second_byte);         /* リストの第二バイトをセット */
        
        token_id = getTokenID();            /* 式解析でトークン番号が変動したので現在のトークン番号を取ってくる */

        if(token_id == LxCMM){              /* カンマ(インデクス)なら */
            setOpr(",");                        /* リストのオペランドにカンマをセット */
            token_id = getToken();              /* <インデクス>の部分を取ってくる */
            opr3 = getLxStr();                  /* Lexicalのstrをopr3にセット */
            setOpr(opr3);                       /* リストのオペランドにセット */
         

            if(token_id == LxG1){               /* G1インデクスモードなら */
                xr = 0x01;                          /* xrをセット */
            } else if(token_id == LxG2){         /* G2インデクスモードなら */
                xr = 0x02;                          /* xrをセット */
            } else{
                /* インデクス部が異常であるエラー処理 */
                error2("You must write register here",getLxStr());
            }
        }



    first_byte = op | gr | xr;          /* first_byteを確定 */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */

    if(token_id == LxG1 || token_id == LxG2){   /* インデクスモードだったら */
        token_id = getToken();                      /* コメントもしくは改行を取ってくる */
    } else {                                    /* それ以外のモードなら */
        
        token_id = getTokenID();                    /* 式の解析で現在のトークン番号が変わったので取ってくる(コメントもしくは改行) */
    }
    
    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
        token_id = getToken();
    }

    setMachineCode(first_byte);         /* 16進ファイルの機械語をセット */
    setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */
    }
}

void opStyle6(){

    // ロケーションカウンタの処理
    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */

    // <命令>の処理
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */

    // <アドレス2>の処理
    xr = 0x00;
    token_id = getToken();              /* <アドレス2>の最初の部分を取ってくる */
    if(token_id == LxNUM || token_id == LxNAM || token_id == LxLBR){      /* 数値もしくはラベルなら */
        #ifdef DEBUG
            printf("before opStyle eqAnalyzer()\n");
        #endif
        second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
        setSecondByte(second_byte);         /* リストの第二バイトをセット */
        
        token_id = getTokenID();            /* 式解析でトークン番号が変動したので現在のトークン番号を取ってくる */

        if(token_id == LxCMM){              /* カンマ(インデクス)なら */
            setOpr(",");                        /* リストのオペランドにカンマをセット */
            token_id = getToken();              /* <インデクス>の部分を取ってくる */
            opr3 = getLxStr();                  /* Lexicalのstrをopr3にセット */
            setOpr(opr3);                       /* リストのオペランドにセット */
         

            if(token_id == LxG1){               /* G1インデクスモードなら */
                xr = 0x01;                          /* xrをセット */
            } else if(token_id == LxG2){         /* G2インデクスモードなら */
                xr = 0x02;                          /* xrをセット */
            } else{
                /* インデクス部が異常であるエラー処理 */
                error2("You must write register here",getLxStr());
            }
        }
    }

    first_byte = op | xr;          /* first_byteを確定 */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */

    if(token_id == LxG1 || token_id == LxG2){   /* インデクスモードだったら */
        token_id = getToken();                      /* コメントもしくは改行を取ってくる */
    } else {                                    /* それ以外のモードなら */
        
        token_id = getTokenID();                    /* 式の解析で現在のトークン番号が変わったので取ってくる(コメントもしくは改行) */
    }
    
    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
        token_id = getToken();
    }

    setMachineCode(first_byte);         /* 16進ファイルの機械語をセット */
    setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */

}

void opStyle7(){

    setRsvWord(str);                    /* リストの予約語をセット */

    if(token_id == LxEQU){
        EQU();
    } else if(token_id == LxDS){
        DS();
    } else if(token_id == LxORG){
        ORG();
    }

}

void opStyle8(){

    setRsvWord(str);                    /* リストの予約語をセット */
    valueSeq();                         /* 定数の個数をcntに格納する */
    int i;
    int limit = 0;

    while((cnt - limit)/5 != 0){        /* 値が4以上のとき */
        setFirstByte(byte[limit]);        /* リストの第一バイトをセット */
        setSecondByte(byte[limit+1]);       /* リストの第二バイトをセット */
        setThirdByte(byte[limit+2]);        /* リストの第三バイトをセット */
        setForthByte(byte[limit+3]);        /* リストの第四バイトをセット */
        for (i = 0; i < 4; i = i+1){        /* 最初の4バイト分まで */
            setMachineCode(byte[limit+i]);  /* 機械語配列にセット */
        }
        limit = limit + 4;      /* 4つ領域を割り当てたので4つ埋める */
        setPca(pca);            /* pcaをセット */
        pca = pca + 4;          /* pcaをカウントアップ */
        #ifdef DEBUG
            printf("DC pca = %s\n",toHex(pca));
        #endif

        printBuffer();          /* リストのバッファを出力 */
        initBuffers();           /* バッファを初期化 */
    }

    while((cnt - limit) != 0){
        setPca(pca);
        pca = pca + (cnt - limit);
        #ifdef DEBUG
            printf("DC pca = %s\n",toHex(pca));
        #endif
        if( (cnt - limit) != 0){
            setFirstByte(byte[limit]);
            setMachineCode(byte[limit]);
            limit = limit + 1;
        }

        if((cnt - limit) != 0){
            setSecondByte(byte[limit]);
            setMachineCode(byte[limit]);
            limit = limit + 1;
        }

        if((cnt - limit) != 0){
            setThirdByte(byte[limit]);
            setMachineCode(byte[limit]);
            limit = limit + 1;
        }

        if((cnt - limit) != 0){
            setForthByte(byte[limit]);
            setMachineCode(byte[limit]);
            limit = limit + 1;
        }

    //printBuffer();
    //initBuffers();

    }
}

void styleAnalyzer(){
    #ifdef DEBUG
        printf("style Analyzer\n");
    #endif
    style = searchStyle(token_id);
    if(style == 1){
        opStyle1();                         // スタイル1の実行
        //printBuffer();                      // リストファイルに出力
        //initBuffers();                      // バッファの初期化
    } else if(style == 2){
        opStyle2();                         // スタイル2の実行
        //printBuffer();                      // リストファイルに出力
        //initBuffers();                      // バッファの初期化
    } else if(style == 3){
        opStyle3();                         // スタイル3の実行
        //printBuffer();
        //initBuffers();                      // バッファの初期化
    } else if(style == 4){
        opStyle4();                         // スタイル4の実行
        //printBuffer();
        //initBuffers();                      // バッファの初期化
    } else if(style == 5){
        opStyle5();                         // スタイル5の実行
        //printBuffer();
        //initBuffers();                      // バッファの初期化
    } else if(style == 6){
        opStyle6();                         // スタイル6の実行
        //printBuffer();
        //initBuffers();                      // バッファの初期化
    } else if(style == 7){
        opStyle7();                         // スタイル7の実行
        //printBuffer();
        //initBuffers();                      // バッファの初期化
    } else if(style == 8){
        opStyle8();                         // スタイル8の実行
        //initBuffers();                      // バッファの初期化
    } else{
        error("Bad Operation Style");
    }
}

public void pass2(FILE sourcefp, FILE listfp, FILE binaryfp){
    #ifdef DEBUG
        printf("pass2 start\n");
    #endif
    initBuffers();                          /* バッファの初期化 */
    setLxFp(sourcefp);
    setLstFp(listfp);
    setBinaryFp(binaryfp);
    token_id = getToken();                  /* 最初のトークンを取ってくる */
    #ifdef DEBUG
        printf("first token = %d\n",token_id);
    #endif

        while(token_id != LxEOF && token_id != LxERR){  /* ファイルの終わりまで */
        #ifdef DEBUG
            printf("before function of start line   token_id = *%d*\n",token_id);
        #endif
        /************************ 行頭の処理 ****************************/
        if(token_id != LxSPC){                  // スペース以外なら
            if(token_id == LxEOL){              /* 行末なら */
                token_id = getToken();          /* 次のトークンを取ってくる */
                while(token_id == LxEOL){       // 次の行も改行なら
                    setPca(pca);                // プログラムカウンタをセット
                    printBuffer();              // 空行を出力
                    initBuffers();              // リストバッファを初期化
                    token_id = getToken();      // 次のトークンを取ってくる
                #ifdef DEBUG
                    printf("start of line token_id = %d\n",token_id);
                    ch();
                #endif
                }
            }
            
            if(token_id == LxNAM){              /* 行の先頭が空白以外なら */
                str = getLxStr();               /* Lexicalのstrを取ってくる */
                setPca(pca);                    // プログラムカウンタをセット
                setLabel(str);                  // ラベルをセット
                token_id = getToken();          // 次のトークンを取ってくる
            } 

            else if(token_id == LxSPC) {        // スペースが来たら
                token_id = getToken();          // 次のトークンを取ってくる
           }

            else if(token_id == LxCOM){       /* 行頭がコメントなら */
                str = getLxStr();
                #ifdef DEBUG
                    printf("Pass2 second comment = %s\n",str);
                #endif
                setComment(str);                    /* リストのコメントにセット */
                printBuffer();                     /* バッファを出力 */
                initBuffers();                      /* バッファを初期化 */
                token_id = getToken();              // 改行もしくはEOFを取ってくる
            } 
            
            else if(token_id == LxEOF){       /* ファイルの終わりなら */
                printBuffer();                      /* 最終行のバッファを出力 */
                break;                              /* pass2のループを抜ける */
            }
        }

        else {                                      // スペースなら
            token_id = getToken();                  // 次のトークンへ
        }
        /*****************************************************************/

        /*********************************** 命令欄 ****************************************/
        /*
        if(token_id != LxEOF && token_id != LxEOL){
            if(0 <= token_id  && token_id < LxOP_NUM){     // 予約語なら
                                                            // 何もしない
            }
            else if(token_id == LxCOM){                     // コメントなら
                 str = getLxStr();                          // Lexicalのstrを取ってくる
                #ifdef DEBUG
                    printf("third comment = *%s*\n",str);
                #endif
                setComment(str);                            // リストのコメントにセット
                printBuffer();                              // バッファを出力
                initBuffers();                              // バッファを初期化
                skipToNewLineOrEOF();                       // 次の改行もしくはEOFの手前まで
                token_id = getToken();                      // 改行かEOFを取ってくる
            }

            else if(token_id == LxEOL){                     // 改行なら
                                                            // 何もしない
            }
            
            else if(token_id == LxEOF){                     // EOFなら
                                                            // 何もしない
            }
            else{                                           // それ以外なら
                
                exit(0);
            }
        }
        */
        /********************************** 命令欄部分終わり *********************************/

        #ifdef DEBUG
            printf("not line token_id = %d\n",token_id);
            ch();
        #endif
    /*********************************** 命令部から右側 *************************/
        while(token_id != LxEOL && token_id != LxEOF && token_id != LxERR){  /* 改行またはファイルの終わりまで */
        if(token_id == LxCOM){                              /* コメントのみの行なら */
            str = getLxStr();                                   /* Lexicalのstrを取ってくる */
            #ifdef DEBUG
                printf("third comment = *%s*\n",str);
            #endif
            setComment(str);                                    /* リストのコメントにセット */
            printBuffer();                                      /* バッファを出力 */
            initBuffers();                                      /* バッファを初期化 */
            token_id = getToken();                              // 改行もしくはEOFを取ってくる
        } 
        
        else if(0 <= token_id && token_id < LxOP_NUM){       /* 予約語なら */
            styleAnalyzer();                                    /* スタイルの確定とそれぞれのスタイルの処理 */
        } 
        
        else if(token_id == LxEOL){                             // 改行なら
                                                                // なにもしない
        } 
        
        else if(token_id == LxEOF){                             // EOFなら
            break;                                              // 抜け出す
        } 
        
        else{                                                   // それ以外なら
            #ifdef DEBUG
                printf("error token_id = %d  str = %s\n",token_id,getLxStr());
            #endif
            error2("Something wrong at operand",getLxStr());
        }

        } /* while 改行またはファイルの終わりまで */

    /******************************************************************************/

    printBuffer();          // 蓄えたリストバッファを出力
    initBuffers();          // リストバッファの初期化

    } /* while ファイルの終わりまで */

    printBinary();                                         /* 溜め込んだ機械語を全て16進ファイルに出力 */
}

// Pass2の初期化
public void initPass2(){
    eofflag = false;
    pca = 0;
    str = null;
    token_id = -1;
    style = -1;
    address = 0;
    label = false;
    initLexical();
}


