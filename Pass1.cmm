#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <ctype.hmm>

#include "Pass1.hmm"
#include "Lexical.hmm"
#include "SymTbl.hmm"
#include "OperationTbl.hmm"
#include "Util.hmm"
#include "Error.hmm"
#include "Editor.hmm" // プログラム長を決めるためだけに使用

//#define UNIX

// static変数
boolean eofflag = false;    // EOFフラグ
int pca;                    // プログラムカウンタ
char[] str;                 // 文字列格納用
int token_id;               // トークン番号
int address;                // アドレス格納用

// Pass1の初期化
public void initPass1(){
    eofflag = false;
    pca = 0;
    str = null;
    token_id = -1;
    address = 0;
    initLexical();          // Lexicalの初期化
    initSymTbl();           // 名前表の初期化
}

public void pass1(FILE sourcefp){
    setLxFp(sourcefp);      // Lexicalにソースファイルのポインタをセット
    #ifdef UNIX
        printf("pass1start\n");
    #endif
    token_id = getToken();                  /* 最初のトークンを取ってくる */
    
    while(token_id != LxEOF && token_id != LxERR){    /* ファイルの終わりまで */

        #ifdef UNIX
            printf("pass1 first getToken() token_id = %d,str = %s\n",token_id,getLxStr());
        #endif

        /********************************** 行頭部分の解析 ************************************/
        if(token_id != LxSPC){              // スペース以外なら
            while(token_id == LxEOL){           /* 改行なら */
                token_id = getToken();          /* 次のトークンを取ってくる */
            }
        
            if(0 <= token_id  && token_id < LxOP_NUM){
                str = getLxStr();
                error2("Operation can't become label : ",str);
            } 
            
            else if(token_id == LxNAM){          /* 行の先頭が空白以外なら */
                str = getLxStr();           /* Lexicalのstrを取ってくる */
                if(isAlpha(str[0])){         /* ラベルに適した文字なら */
                    if(searchLabel(str) == false){          // ラベルが未登録なら
                        asignLabel(pca,str);        // ラベルを登録 */
                        token_id = getToken();      // 次のトークンを取ってくる
                    } else {
                        error2("This label is defined twice",getLxStr());
                    }
                } 
                
                else {
                    error2("Label must start with alphabet",str);
                }
            } 

            else if(token_id == LxSPC) {        // スペースなら
                token_id = getToken();          // 次のトークンを取ってくる
            }
            
            else if(token_id == LxCOM){
                skipToNewLineOrEOF();           // 改行もしくはEOFの手前まで進む
                token_id = getToken();          // 改行もしくはEOFを取ってくる
            } 
            
            else if(token_id == LxEOF){   /* ファイルの終わりなら */
                break;                      /* pass1のループを抜ける */
            }

            else {                              // それ以外
                error2("Label must start with alphabet",str);
            }
        }

        else {                                  // スペースなら
            token_id = getToken();              // 次のトークンへ
        }

        /******************************* ラベル部分終わり**************************************/
        

        /*********************************** 命令欄 ****************************************/
        if(token_id != LxEOF && token_id != LxEOL){
            #ifdef UNIX
                printf("mnemonic place token_id = %d, str = %s\n",token_id,getLxStr());
            #endif
            if(0 <= token_id  && token_id < LxOP_NUM){     // 予約語なら
                if(token_id != LxEQU && token_id != LxORG && token_id != LxDC && token_id != LxDS){
                    pca = pca + searchSize(token_id);
                    skipToNewLineOrEOF();
                    token_id = getToken();
                }
                else {                                      // 予約語がEQU,ORG,DC,DSなら
                                                            // 何もしない
                }
            }
            else if(token_id == LxCOM){                     // コメントなら
                skipToNewLineOrEOF();                       // 改行もしくはEOF手前まで進める
                token_id = getToken();                      // 改行もしくはEOFを取ってくる
            }
            else if(token_id == LxEOL){                     // 改行なら
                                                            // 何もしない
            }
            else if(token_id == LxEOF){                     // EOFなら
                                                            // 何もしない
            }
            else{                                           // それ以外なら
                error2("Unknown operation",getLxStr());
                exit(0);
            }
        }
        /********************************** 命令欄部分終わり *********************************/

              
       /******************************** オペランド欄部分 ****************************************/
        while(token_id != LxEOL && token_id != LxEOF && token_id != LxERR){    /* 改行またはファイルの終わりまで */
             #ifdef UNIX
                printf("operand token_id = %d str = %s\n",token_id,getLxStr());
            #endif


            if(token_id == LxCOM){
                skipToNewLineOrEOF();       // 改行もしくはEOFの手前まで進める
                token_id = getToken();      // 改行もしくはEOFを取ってくる
            }
        
            else if(token_id == LxEQU){       /* EQU命令なら */
                token_id = getToken();                     /* <式>の部分を取ってくる */
                address = eqAnalyzer();         /* <式>の解析結果を代入 */
                if(searchSymAdr(pca)){                          // アドレスにラベルが登録されているか?
                    changeSymAdr(pca,address);                 // ラベルのアドレスを変更
                } else {                                        // アドレスにラベルが登録されていなければ
                    error("Can't find label name at EQU operation");     // エラー
                }
                token_id = getTokenID();        /* 式解析中にtoken_idが変わったのでgetする*/
                #ifdef UNIX
                    printf("pass1 EQU token_id = %d\n",token_id);
                #endif
            }
        
            else if(token_id == LxORG){
                int org_adr;
                token_id = getToken();                     /* <式>の部分を取ってくる */
                org_adr = eqAnalyzer();             /* <式>の解析結果を代入 */
                token_id = getTokenID();        /* 式解析中にtoken_idが変わったのでgetする */
                if(pca <= org_adr){
                    pca = org_adr;
                }
                else{
                    error2("Bad ORG operation",getLxStr());
                }
            } 
        
            else if(token_id == LxDC){        /* DC命令なら */
                while(token_id != LxEOL && token_id != LxCOM && token_id != LxEOF){
                    token_id = getToken();          /* 次のトークンを取ってくる */
                    #ifdef UNIX
                        printf("DC token_id = %d\n",token_id);
                    #endif
                    if(token_id == LxSTR){          /* <文字列>なら */
                        str = getLxStr();           /* Lexicalのstrを取ってくる */
                        pca = pca + strLen(str);    /* strの長さだけpcaを増加 */
                    } else if(token_id == LxNUM || token_id == LxNAM || token_id == LxLBR ){   /* <数値>なら */
                        pca = pca + 1;
                    }
                }
            
                if(token_id == LxCOM){          /* コメントで終わったなら */
                    skipToNewLineOrEOF();       /* 次の行へ行く */
                }
            } 
        
            else if(token_id == LxDS){
                while(token_id != LxEOL && token_id != LxCOM){
                    token_id = getToken();          /* 次のトークンを取ってくる */
                    if(token_id == LxSTR){          /* <文字列>なら */
                        pca = pca + 1;    /* strの長さだけpcaを増加 */
                    } else if(token_id == LxNUM || token_id ==LxNAM || token_id == LxLBR){   /* <数値>なら */
                        pca = pca + 1;
                    }
                }
            } 
        
            else if(token_id == LxEOL){
            } 
        
            else if(token_id == LxEOF){
            } 
        
            else if(0 <= token_id  && token_id < LxOP_NUM){
                pca = pca + searchSize(token_id);
                skipToNewLineOrEOF();
                token_id = getToken();
            } 
        
            else{
                error("pass1 bad instruction!!bad instruction!!bad instruction!!bad instruction!!bad instruction!!bad instruction!!bad instruction!!");
            }
        }
    token_id = getToken();                  // 次のトークンを取ってくる

    }

    // プログラム開始番地とプログラム長を決定する
    setMachineCode(0);
    setMachineCode(0xda);

    #ifdef UNIX
        printSymTbl();
    #endif

}
